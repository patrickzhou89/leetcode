 
    int col = grid.length;
    int row = grid[0].length;
    boolean[][] visited=new boolean[col][row];
    int maxArea = 0;
    for(int i=0;i<col;i++){
      for(int j=0;j<row;j++){
        if(!visited[i][j]&&grid[i][j]==1){
          int area = recurse(i,j,grid, visited);
          maxArea = Math.max(maxArea, area);
        }
        
      }
    }
    return maxArea;
  }
  
  private static int recurse(int col, int row, int [][] grid, boolean [][] visited){
    //Add Boundary check
    if(col>=grid.length || row>=grid[0].length || grid[col][row]==0||visited[col][row]){
      return 0; 
    }
    visited[col][row]=true;
    return 1+(recurse(col+1, row, grid, visited))+(recurse(col, row+1, grid,visited));
  }
  
  public static void main(String[] args) {
    int[][] test = new int[][]{
      {1,1},
      {1,1}
    };
    int[][] test1 = new int[][]{
      {1,0,1},
      {1,0,1},
      {0,0,1}
    };
